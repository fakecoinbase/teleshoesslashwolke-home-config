#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(time);

my $SHOW_TEXT_MILLIS = 3000;

my $usage = "Usage:
  $0 -h|--help
    show this message

  $0 [CMD_OPT CMD_OPT ..] --pos-file=POS_FILE [MPV_ARG MPV_ARG ..]
    -fork and run \"mpv --input-ipc-server=IPC_FILE MPV_ARG MPV_ARG\"
    -write get_property commands to IPC_FILE with socat every 1s
    -read the result and write it to POS_FILE formatted like this:
       POSITION_SECONDS - FILE_PATH

  CMD_OPT
    --cmd=COMMAND
      write COMMAND once to IPC_FILE at startup, before the first get_property command
      if multiple CMD_OPTS are specified, they will be run in order given

    --seek=SEEK_POS
      same as --cmd='seek SEEK_POS'

    --show-text=TEXT
      same as --cmd='{\"command\": [\"expand-properties\", \"show-text\", \"TEXT\", $SHOW_TEXT_MILLIS]}'
      -TEXT can contain properties like \"\${filename}\" and newlines like \"\\n\"
      -double-quotes are escaped
";

my $MAX_IPC_FAILS = 3;

sub isRunning($);
sub nowMillis();

sub main(@){
  my $posFile;
  my @mpvArgs;
  my @initCmds;

  while(@_ > 0 and $_[0] =~ /^(--cmd|--seek|--show-text)=.+$/){
    my $opt = shift;
    if($opt =~ /^--cmd=(.+)$/){
      push @initCmds, $1;
    }elsif($opt =~ /^--seek=(.+)$/){
      push @initCmds, "seek $1";
    }elsif($opt =~ /^--show-text=(.+)$/){
      my $text = $1;
      $text =~ s/"/\\"/g;
      push @initCmds, "{\"command\": [\"expand-properties\", \"show-text\", \"$text\", $SHOW_TEXT_MILLIS]}";
    }else{
      die "$usage\nunknown opt: $opt\n";
    }
  }

  if(@_ > 0 and $_[0] =~ /^(-h|--help)$/){
    print $usage;
    exit 0;
  }elsif(@_ > 0 and $_[0] =~ /^--pos-file=(.+)$/){
    $posFile = $1;
    shift @_;
    my @mpvArgs = @_;
  }else{
    die $usage;
  }

  my $nowMillis = nowMillis();
  my $ipcFile = "/tmp/mpv-pos-ipc-$nowMillis";
  print "writing commands to $ipcFile\n";
  my @mpvCmd = ("mpv", "--input-ipc-server=$ipcFile", @_);

  my $getPosCmdJson = "{\"command\": [\"get_property\", \"playback-time\"]}";
  my $getPathCmdJson = "{\"command\": [\"get_property\", \"path\"]}";

  my $pid = fork();
  if($pid == 0){
    exec @mpvCmd;
  }else{
    my $ipcFailCount = 0;
    my $initCmdsRun = 0;
    open FH, "> $posFile" or die "could not write $posFile\n$!\n";
    while(isRunning $pid){
      sleep 1;
      if(not $initCmdsRun){
        for my $cmd(@initCmds){
          open CMD, "|-", "socat - $ipcFile"
            or die "could not run initial commands\n";
          print CMD "$cmd\n";
          close CMD;
        }
        $initCmdsRun = 1;
      }
      my $cmdRes = `/bin/echo -ne '$getPosCmdJson\\n$getPathCmdJson\\n' | socat - $ipcFile`;
      if($cmdRes =~ /^
        \{"data":(\d+|\d*\.\d+),.*"error":"success"\}\n
        \{"data":"(.*)",.*"error":"success"\}\n
      $/x){
        my ($pos, $path) = ($1, $2);
        while($path =~ /\\u([0-9a-f]{4})/){
          my $hex = $1;
          my $c = chr hex($hex);
          $path =~ s/\\u$hex/$c/g;
        }
        print FH "$pos - $path\n";
        $ipcFailCount = 0;
      }else{
        $ipcFailCount++;
        if($ipcFailCount >= $MAX_IPC_FAILS){
          last;
        }
      }
    }
    close FH;
    system "kill -9 $pid 2>/dev/null";
    waitpid $pid, 0;
    system "rm", $ipcFile;
    exit 0;
  }
}

sub isRunning($){
  my ($pid) = @_;
  waitpid $pid, 1;
  system "kill", "-0", $pid;
  if($? == 0){
    return 1;
  }else{
    return 0;
  }
}

sub nowMillis(){
  return int(time * 1000.0 + 0.5);
}

&main(@ARGV);
