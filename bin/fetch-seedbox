#!/usr/bin/perl
use strict;
use warnings;

my $MAX_ATTEMPTS = 5;

sub seedboxIsUpToDate();

my $usage = "Usage:
  $0
     fetch files from seedbox until:
       `seedbox --is-out-of-date` returns \"up-to-date\"
     runs a maximum of $MAX_ATTEMPTS times,
       and will not run at all if mtimes already match

     while `seedbox --is-up-to-date` == modified:
       -run: seedbox --cleanup
       -run: seedbox --mark-up-to-date
       -run: seedbox -g
       -exit if attempts == $MAX_ATTEMPTS
";

sub main(@){
  die $usage if @_ > 0;

  if(seedboxIsUpToDate()){
    print "skipping, 'seedbox --is-up-to-date' is up-to-date\n";
    exit 0;
  }

  my $attempt = 1;
  while($attempt <= $MAX_ATTEMPTS and not seedboxIsUpToDate()){
    print "\n\nrunning seedbox -g (attempt $attempt/$MAX_ATTEMPTS)\n";
    $attempt++;
    system "seedbox", "--cleanup";
    system "seedbox", "--mark-up-to-date";
    system "unbuffer", "seedbox", "-g";
  }

  if(seedboxIsUpToDate()){
    print "finished, 'seedbox --is-up-to-date' is up-to-date\n";
    exit 0;
  }else{
    print "ERROR: seedbox is out of date immediately after syncing\n";
    exit 1;
  }
}

sub seedboxIsUpToDate(){
  my $upToDate = `seedbox --is-up-to-date`;
  if($upToDate =~ /up-to-date/){
    return 1;
  }elsif($upToDate =~ /modified/){
    return 0;
  }else{
    die "malformed response to: seedbox --is-up-to-date\n";
  }
}

&main(@ARGV);
