#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use Time::HiRes qw(time);

my $STEAM_DIR_BASE = "$ENV{HOME}/.steam/steam";
my $SAVE_DIR_PATTERN = ""
  . "steamapps/compatdata/"
  . "*/" #app ID, should be: 701160
  . "pfx/drive_c/users/steamuser/"
  . "AppData/LocalLow/noio/KingdomTwoCrowns/Release"
;

my $SAVE_DIR = glob("$STEAM_DIR_BASE/$SAVE_DIR_PATTERN");
my $CACHE_DIR = "$ENV{HOME}/.cache/kingdom-saves";

sub extractTarToSaveDir($$);
sub removeCurrentSave($);
sub ensureSaveCached($$);
sub fetchCurrentSaveTar($);
sub fetchCurrentSaveMtime($);
sub readCachedSaves($);
sub sha1($);
sub mtime($);
sub run(@);

my $EXEC = basename $0;

my $usage = "Usage:
  $EXEC -h|--help
    show this message

  $EXEC
  $EXEC --backup|--save
    take files from $SAVE_DIR/* and make an xz'd tarball in $CACHE_DIR
      skips storing the tarball if an identical one already exists

  $EXEC --restore TAR_BALL
    takes a (compressed or uncompressed) tar ball
      and extracts it to the save dir, after backing up the contents
    -backup like in $EXEC --backup
    -MOVE files from
      $SAVE_DIR/
      to
      /tmp/kingdom-save-backup-<MILLIS>
    -extract <TAR_BALL> to
      $SAVE_DIR
";

sub main(@){
  if(@_ == 1 and $_[0] =~ /^(-h|--help)$/){
    print $usage;
    exit 0;
  }elsif(@_ == 0 or (@_ == 1 and $_[0] =~ /^(--backup|--save)$/)){
    ensureSaveCached($SAVE_DIR, $CACHE_DIR);
  }elsif(@_ == 2 and $_[0] =~ /^(--restore)$/ and -f $_[1]){
    my $tarFile = $_[1];
    print "\nCACHING CURRENT SAVE:\n";
    ensureSaveCached($SAVE_DIR, $CACHE_DIR);

    print "\nREMOVING CURRENT SAVE:\n";
    removeCurrentSave($SAVE_DIR);

    print "\nEXTRACTING NEW SAVE:\n";
    extractTarToSaveDir($tarFile, $SAVE_DIR);
  }else{
    die $usage;
  }
}

sub extractTarToSaveDir($$){
  my ($tarFile, $saveDir) = @_;
  run "tar", "-xf", $tarFile, "-C", $SAVE_DIR;
}

sub removeCurrentSave($){
  my ($saveDir) = @_;
  my $millis = int(time * 1000.0 + 0.5);
  my $tmpDir = "/tmp/kingdom-save-backup-$millis";
  run "mkdir", "-p", $tmpDir;
  run "mv", glob("$saveDir/*"), "$tmpDir/";
}

sub ensureSaveCached($$){
  my ($saveDir, $cacheDir) = @_;
  if(not defined $saveDir or not -d $saveDir){
    die "ERROR: save dir does not exist: $saveDir\n";
  }

  my $currentSaveTar = fetchCurrentSaveTar($saveDir);
  my $currentSaveMtime = fetchCurrentSaveMtime($saveDir);
  my $currentSaveSha1 = sha1 $currentSaveTar;

  run "mkdir", "-p", $cacheDir if not -d $cacheDir;
  if(not -d $cacheDir){
    die "ERROR: cache dir does not exist: $cacheDir\n";
  }

  my $saves = readCachedSaves($cacheDir);
  if(defined $$saves{$currentSaveSha1}){
    my $file = $$saves{$currentSaveSha1}{file};
    print "save already cached: $file\n";
  }else{
    my $datetimeFmt = `date --date \@$currentSaveMtime +%Y%m%d_%H%M%S`;
    chomp $datetimeFmt;
    my $saveFileCache = "$cacheDir/${datetimeFmt}_${currentSaveSha1}.tar.xz";
    run "xz --compress --stdout $currentSaveTar > $saveFileCache";
    if(not -f $saveFileCache){
      die "ERROR: could not create file $saveFileCache\n";
    }
    run "touch", $saveFileCache, "--date", "\@$currentSaveMtime";
  }

  run "rm", $currentSaveTar;
}

sub fetchCurrentSaveTar($){
  my ($saveDir) = @_;
  die "ERROR: could not find dir $saveDir\n" if not -d $saveDir;

  my $millis = int(time * 1000.0 + 0.5);
  my $oldPWD = $ENV{PWD};
  chdir $saveDir;
  $ENV{PWD} = $saveDir;

  my $tmpTar = "/tmp/kingdom-save-$millis.tar";
  run "tar", "-cf", $tmpTar, glob "*";

  chdir $oldPWD;
  $ENV{PWD} = $oldPWD;

  return $tmpTar;
}

sub fetchCurrentSaveMtime($){
  my ($saveDir) = @_;
  my @files = glob "$saveDir/*";
  my $maxMtime = undef;
  for my $file(@files){
    my $mtime = mtime $file;
    if(not defined $maxMtime or $mtime > $maxMtime){
      $maxMtime = $mtime;
    }
  }
  return $maxMtime;
}

sub readCachedSaves($){
  my ($cacheDir) = @_;
  my @cacheSaves = glob "$cacheDir/*.tar.xz";
  my $saves = {};
  for my $file(@cacheSaves){
    if($file =~ /^$cacheDir\/(\d\d\d\d\d\d\d\d)_(\d\d\d\d\d\d)_([0-9a-f]{40})\.tar\.xz$/){
      my ($date, $time, $sha1) = ($1, $2, $3);
      $$saves{$sha1} = {
        file => $file,
        date => $date,
        time => $time,
        sha1 => $sha1,
      };
    }
  }
  return $saves;
}

sub sha1($){
  my ($file) = @_;
  if(not -f $file){
    die "ERROR: could not read $file\n";
  }
  open FH, "-|", "sha1sum", $file;
  my $sha1sum = <FH>;
  close FH;
  if($sha1sum =~ /^([0-9a-f]{40})\s+$file$/){
    return $1;
  }else{
    die "ERROR: could not sha1sum $file\n";
  }
}

sub mtime($){
  return (stat $_[0])[9];
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
