#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

my $keysPid = undef;
$SIG{'INT'} = sub{system "kill", $keysPid; exit 0};
$SIG{'TERM'} = sub{system "kill", $keysPid; exit 0};

my $EXEC = basename $0;

my $usage = "Usage:
  $EXEC -h|--help
    show this message

  $EXEC
  $EXEC --main
    send typed keys using `xdotool` and `keys`
      -read <KEY>s from stdin using `keys --check-pid=<CURRENT_PID>`
      -for each <KEY>:
        -select <XDOTOOL_CMD> based on <KEY> (either 'type' or 'key')
        -send <KEY> to X with `xdotool <XDOTOOL_CMD> <KEY>`

  $EXEC WM_CLASS
    send typed keys to a window using `wmctrl` and `xdotool` and `keys`
      -identify <WINDOW_ID> with the indicated <WM_CLASS> using `wmctrl`
      -read <KEY>s from stdin using `keys --check-pid=<CURRENT_PID>`
      -for each <KEY>:
        -select <XDOTOOL_CMD> based on <KEY> (either 'type' or 'key')
        -send <KEY> to X with `xdotool <XDOTOOL_CMD> --window <WINDOW_ID> <KEY>`
        -if <WINDOW_ID> was not found or send failed, retry up to 3 times:
          -identify <WINDOW_ID> again using `wmctrl`
          -re-send <KEY> using `xdotool`
";

sub sendKeyMain($);
sub sendKeyWindow($$);
sub getCmdKeyOrType($);
sub wmClassToWindowId($);
sub tryrun(@);

sub main(@){
  my $wmClass;
  if(@_ == 1 and $_[0] =~ /^(-h|--help)$/){
    print $usage;
    exit 0;
  }elsif(@_ == 0 or (@_ == 1 and $_[0] =~ /^(--main)$/)){
    $wmClass = undef;
  }elsif(@_ == 1){
    $wmClass = $_[0];
  }else{
    die $usage;
  }

  my $windowId = undef;
  if(defined $wmClass){
    $windowId = wmClassToWindowId $wmClass;
  }

  $keysPid = open STDIN, "-|", "keys", "--check-pid=$$" or die "Could not run 'keys'\n";
  while(my $key = <STDIN>){
    chomp $key;
    my $success = 0;
    my $attempts = 3;
    while($success == 0 and $attempts > 0){
      if(not defined $wmClass){
        $success = sendKeyMain $key;
      }elsif(defined $wmClass and defined $windowId){
        $success = sendKeyWindow $key, $windowId;
      }else{
        $success = 0;
      }

      if(not $success and defined $wmClass){
        $windowId = wmClassToWindowId $wmClass;
      }
      $attempts--;
    }

    if(not $success){
      print STDERR "\nWARNING:Could not send key '$key'\n";
    }
  }
}

sub sendKeyMain($){
  my ($key) = @_;
  return tryrun "xdotool", getCmdKeyOrType($key), $key;
}
sub sendKeyWindow($$){
  my ($key, $windowId) = @_;
  return tryrun "xdotool", getCmdKeyOrType($key), "--window", $windowId, $key;
}

sub getCmdKeyOrType($){
  my ($key) = @_;
  if($key =~ /^[a-zA-Z0-9 `~!@#\$%^&*()\-_=+\[{\]}\\|'";:\/?.>,<]$/){
    return 'type';
  }else{
    return 'key';
  }
}

sub wmClassToWindowId($){
  my $wmClass = shift;
  my $addOutput = `wmctrl -r $wmClass -x -v -b add,wmctrl_wants_you 2>&1`;
  my $removeOutput = `wmctrl -r $wmClass -x -v -b remove,wmctrl_wants_you 2>&1`;

  if($removeOutput =~ /(0x[0-9a-f]+)/){
    return $1;
  }else{
    print STDERR "WARNING: No window found for WM_CLASS=$wmClass using wmctrl\n";
  }

  return undef;
}

sub tryrun(@){
  system @_;
  if($? == 0){
    return 1;
  }else{
    return 0;
  }
}

&main(@ARGV);
