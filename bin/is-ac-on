#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(time);

my $kurtosisThreshold = 5;

sub identifyImage($@);

my $usage = "Usage:
  $0 [OPTS]
    run `sbcam`, pass the image produced to `identify` and read the kurtosis,
      and print 'yes' for kurtosis>10 (lit LEDs are sharp)
      and print 'no' otherwise

   OPTS
     -v | --verbose
       print the output of sbcam, the image file name, and the kurtosis of the image
";

sub main(@){
  my $verbose = shift if @_ > 0 and $_[0] =~ /^(-v|--verbose)$/;
  die $usage if @_ > 0;

  my $file = "/tmp/is-ac-on_" . int(time*1000) . ".jpg";
  if($verbose){
    system "sbcam $file";
  }else{
    system "sbcam $file >/dev/null 2>/dev/null";
  }
  if(not -f $file){
    die "ERROR: file \"$file\" not found\n";
  }

  my $info = identifyImage $file, qw(kurtosis);
  my $k = $$info{kurtosis};
  chomp $k;
  if($k !~ /^-?\d+(\.\d+)?$/){
    die "ERROR\n";
  }
  if(defined $verbose){
    print "$file => kurtosis=$k\n";
  }
  if($k > $kurtosisThreshold){
    print "yes\n";
  }else{
    print "no\n";
  }
}

sub identifyImage($@){
  my ($image, @props) = @_;

  my $format = join("@", map {"%[$_]"} @props) . "\\n";
  my @cmd = ("identify", "-format", $format, $image);

  open FH, "-|", @cmd;
  my $val = join '', <FH>;
  close FH;
  $val =~ s/\n//g;

  my @vals = split /@/, $val;
  if(@vals != @props){
    die "Error reading `@cmd` output: $val\n";
  }

  my $valsByProp = {};
  for(my $i=0; $i<@vals; $i++){
    my $prop = $props[$i];
    my $propVal = $vals[$i];
    if($propVal !~ /^-?\d+(?:\.\d+)?$/){
      die "non-numeric value returned by `@cmd`: $propVal\n";
    }
    $$valsByProp{$prop} = $propVal;
  }
  return $valsByProp;
}

&main(@ARGV);
