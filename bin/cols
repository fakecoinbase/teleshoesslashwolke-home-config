#!/usr/bin/perl
use strict;
use warnings;
use utf8;

sub formatColumns($$@);
sub padLine($$$);
sub padList($$@);
sub splitLongLines($@);
sub splitIntoBuckets($@);

sub main(@){
  my @lines = <STDIN>;
  my $cols = 4;
  my $colWidth = undef;
  print $_ foreach formatColumns($cols, $colWidth, @lines);
}

sub formatColumns($$@){
  my ($cols, $colWidth, @lines) = @_;
  for my $line(@lines){
    $line =~ s/[\r\n]//g;
    utf8::decode $line;
  }

  if(defined $colWidth){
    @lines = splitLongLines($colWidth, @lines);
  }

  my @columns = splitIntoBuckets($cols, @lines);

  my $maxHeight = 0;
  for my $column(@columns){
    $maxHeight = @$column if @$column > $maxHeight;
  }
  for my $column(@columns){
    $column = [padList($maxHeight, "", @$column)];
  }

  for my $column(@columns){
    my $maxWidth = 0;
    for my $line(@$column){
      my $len = length $line;
      $maxWidth = $len if $len > $maxWidth;
    }
    for my $line(@$column){
      $line = padLine($maxWidth, " ", $line);
    }
  }

  my @fmtLines;
  for(my $i=0; $i<$maxHeight; $i++){
    my $line = join "|", map{$$_[$i]} @columns;
    push @fmtLines, "$line\n";
  }
  return @fmtLines;
}

sub padLine($$$){
  my ($minWidth, $padStr, $line) = @_;
  while(length $line < $minWidth){
    $line .= $padStr;
  }
  return $line;
}

sub padList($$@){
  my ($minLength, $padItem, @items) = @_;
  while(@items < $minLength){
    push @items, $padItem;
  }
  return @items;
}

sub splitLongLines($@){
  my ($maxWidth, @lines) = @_;
  my @shortLines;
  for my $line(@lines){
    my @subLines;
    while(length $line > $maxWidth){
      my $targetIndex = $maxWidth;
      my $prefix = substr $line, 0, $targetIndex;
      push @subLines, $prefix;
      $line = substr $line, $targetIndex;
    }
    if(length $line > 0){
      push @subLines, $line;
    }elsif(@subLines == 0){
      #include at least one line, even empty, per each original line
      push @subLines, $line;
    }
    @shortLines = (@shortLines, @subLines);
  }
  return @shortLines;
}

sub splitIntoBuckets($@){
  my ($bucketCount, @items) = @_;
  my @buckets;
  my $targetBucketSize = int(@items / $bucketCount);

  #the first numExtra buckets get one more item
  my $numExtra = @items % $bucketCount;

  for(my $b=0; $b<$bucketCount; $b++){
    my $bucket = [];
    my $itemCount = $targetBucketSize;
    if($b < $numExtra){
      $itemCount++;
    }
    while($itemCount > 0){
      if(@items == 0){
        die "ERROR: bucket calculation is broken, ran out of items\n";
      }
      push @$bucket, shift @items;
      $itemCount--;
    }
    push @buckets, $bucket;
  }

  if(@items != 0){
    die "ERROR: bucket calculation is broken, too many items\n";
  }

  return @buckets;
}

&main(@ARGV);
