#!/usr/bin/perl
use strict;
use warnings;
use utf8;
use File::Basename qw(basename);

my $WRAP_TYPE_NONE = "none"; #never split lines, ignore MAX_COL_WIDTH
my $WRAP_TYPE_CHAR = "char"; #split lines at exact char counts
my $WRAP_TYPE_WORD = "word"; #attempt to split lines at spaces

my $DEFAULT_COLS = 4;
my $DEFAULT_MAX_COL_WIDTH = 60;
my $DEFAULT_WRAP_TYPE = $WRAP_TYPE_WORD;

my $EXEC = basename $0;

my $usage = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC [OPTS]
    Split text into multiple, narrow vertical columns.
      -read lines from STDIN, or from <FILE> (see -f)
      -if WRAP_TYPE is not none (see -t, -n), split individual lines,
        so that each line is at most <MAX_COL_WIDTH> chars
        (default is $DEFAULT_MAX_COL_WIDTH, see -m)
      -group lines into <COLS> similarly-sized lists
        (default is $DEFAULT_COLS, see -c)
      -while one list is shorter than another,
        append an empty line to that list,
        until all lists are exactly the same size
      -for each list, while one item in the list is shorter than another,
        append a space to that item,
        until all items are the same length for each list
      -on each line of output, render one item from each list,
        with '|' between each item

  OPTS
    -f FILE | --file=FILE
      read from file FILE instead of STDIN

    -c COLS | --cols=COLS | --columns=COLS
      split lines into COLUMNS vertical columns
      (default = $DEFAULT_COLS)

    -m MAX_COL_WIDTH | --max-col-width=MAX_COL_WIDTH
      each column is at most MAX_COL_WIDTH chars (ignored if --wrap-type=none)
      (default = $DEFAULT_MAX_COL_WIDTH)

    -t WRAP_TYPE | --wrap-type=WRAP_TYPE | --wrap=WRAP_TYPE
      specify method to use to split each line into MAX_COL_WIDTH chars
      WRAP_TYPE
        none: lines are never split, and MAX_COL_WIDTH is ignored
        char: split lines at exact char counts
        word: split long lines at spaces/non-word-chars if possible
      (default = $DEFAULT_WRAP_TYPE)

    -n
      same as: --wrap-type=none
";

sub formatColumns($$@);
sub padLine($$$);
sub padList($$@);
sub splitLongLines($$@);
sub splitIntoBuckets($@);

sub main(@){
  my $file = undef;
  my $cols = $DEFAULT_COLS;
  my $maxColWidth = $DEFAULT_MAX_COL_WIDTH;
  my $wrapType = $DEFAULT_WRAP_TYPE;
  while(@_ > 0 and $_[0] =~ /^-/){
    my $opt = shift @_;
    my $arg = undef;
    if($opt =~ /^--\w+=(.+)$/){
      $arg = $1;
    }elsif($opt =~ /^(-f|-c|-m|-t)$/){
      die "$usage\nmissing arg to $opt\n" if @_ == 0;
      $arg = shift @_;
    }

    if($opt =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($opt =~ /^(-f|--file=.+)$/){
      $file = $arg;
    }elsif($opt =~ /^(-c|--cols=.+|--columns=.+)$/){
      $cols = $arg;
    }elsif($opt =~ /^(-m|--max-col-width=.+)$/){
      $maxColWidth = $arg;
    }elsif($opt =~ /^(-t|--wrap-type=.+|--wrap=.+)$/){
      $wrapType = $arg;
    }elsif($opt =~ /^(-n)$/){
      $wrapType = $WRAP_TYPE_NONE;
    }else{
      die "$usage\nunknown opt: $opt\n";
    }
  }

  die $usage if @_ > 0;

  if(defined $file and not -f $file){
    die "$usage\nfile does not exist: $file\n";
  }elsif($cols !~ /^\d+$/ or $cols <= 0){
    die "$usage\ninvalid COLS: $cols\n";
  }elsif($maxColWidth !~ /^\d+$/ or $maxColWidth <= 0){
    die "$usage\ninvalid MAX_COL_WIDTH: $maxColWidth\n";
  }elsif($wrapType !~ /^($WRAP_TYPE_NONE|$WRAP_TYPE_CHAR|$WRAP_TYPE_WORD)$/){
    die "$usage\ninvalid WRAP_TYPE: $wrapType\n";
  }

  my @lines;
  if(defined $file){
    open FH, "<", $file or die "could not read $file\n$!\n";
    @lines = <FH>;
    close FH;
  }else{
    @lines = <STDIN>;
  }

  print $_ foreach formatColumns($cols, $maxColWidth, $wrapType, @lines);
}

sub formatColumns($$@){
  my ($cols, $maxColWidth, $wrapType, @lines) = @_;
  for my $line(@lines){
    $line =~ s/[\r\n]//g;
    utf8::decode $line;
  }

  if($wrapType ne $WRAP_TYPE_NONE){
    @lines = splitLongLines($maxColWidth, $wrapType, @lines);
  }

  my @columns = splitIntoBuckets($cols, @lines);

  my $maxHeight = 0;
  for my $column(@columns){
    $maxHeight = @$column if @$column > $maxHeight;
  }
  for my $column(@columns){
    $column = [padList($maxHeight, "", @$column)];
  }

  for my $column(@columns){
    my $maxWidth = 0;
    for my $line(@$column){
      my $len = length $line;
      $maxWidth = $len if $len > $maxWidth;
    }
    for my $line(@$column){
      $line = padLine($maxWidth, " ", $line);
    }
  }

  my @fmtLines;
  for(my $i=0; $i<$maxHeight; $i++){
    my $line = join "|", map{$$_[$i]} @columns;
    push @fmtLines, "$line\n";
  }
  return @fmtLines;
}

sub padLine($$$){
  my ($minWidth, $padStr, $line) = @_;
  while(length $line < $minWidth){
    $line .= $padStr;
  }
  return $line;
}

sub padList($$@){
  my ($minLength, $padItem, @items) = @_;
  while(@items < $minLength){
    push @items, $padItem;
  }
  return @items;
}

sub splitLongLines($$@){
  my ($maxWidth, $wrapType, @lines) = @_;
  my @shortLines;
  for my $line(@lines){
    my @subLines;
    while(length $line > $maxWidth){
      my $targetIndex;
      if($wrapType eq $WRAP_TYPE_NONE){
        die "ERROR: splitting lines, but wrap-type=$WRAP_TYPE_NONE\n";
      }elsif($wrapType eq $WRAP_TYPE_CHAR){
        $targetIndex = $maxWidth;
      }elsif($wrapType eq $WRAP_TYPE_WORD){
        $targetIndex = $maxWidth;
        while($targetIndex > 0 and substr($line, $targetIndex, 1) =~ /\w/){
          $targetIndex -= 1;
        }
        if($targetIndex <= 0){
          $targetIndex = $maxWidth
        }
      }else{
        die "ERROR: unknown wrap-type: $wrapType\n";
      }
      my $prefix = substr $line, 0, $targetIndex;
      push @subLines, $prefix;
      $line = substr $line, $targetIndex;
    }
    if(length $line > 0){
      push @subLines, $line;
    }elsif(@subLines == 0){
      #include at least one line, even empty, per each original line
      push @subLines, $line;
    }
    @shortLines = (@shortLines, @subLines);
  }
  return @shortLines;
}

sub splitIntoBuckets($@){
  my ($bucketCount, @items) = @_;
  my @buckets;
  my $targetBucketSize = int(@items / $bucketCount);

  #the first numExtra buckets get one more item
  my $numExtra = @items % $bucketCount;

  for(my $b=0; $b<$bucketCount; $b++){
    my $bucket = [];
    my $itemCount = $targetBucketSize;
    if($b < $numExtra){
      $itemCount++;
    }
    while($itemCount > 0){
      if(@items == 0){
        die "ERROR: bucket calculation is broken, ran out of items\n";
      }
      push @$bucket, shift @items;
      $itemCount--;
    }
    push @buckets, $bucket;
  }

  if(@items != 0){
    die "ERROR: bucket calculation is broken, too many items\n";
  }

  return @buckets;
}

&main(@ARGV);
