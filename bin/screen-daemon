#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use IPC::Open3 qw(open3);
use IO::Handle;
use POSIX qw(strftime);
use Time::HiRes qw(alarm time sleep);

my $screenDaemonConf = "$ENV{HOME}/.config/screen-daemon.conf";
my $logBaseDir = "$ENV{HOME}/.cache/logs";

my $EXEC = basename $0;

my $PRINT_TO_STDOUT = 1;

my $usage = "Usage:
  $EXEC -h|--help
    show this message

  $EXEC
  $EXEC --list
    -read entries from config file $screenDaemonConf
    -read screen sessions from `screen -list`
    -for each entry in the config:
      -print \"NAME on\" if a screen session named NAME exists
      -print \"NAME off\" otherwise

  $EXEC --list-names
    -read entries from config file $screenDaemonConf
    -print \"NAME\" for each entry in the config

  $EXEC NAME
    -$EXEC NAME --ensure
    -$EXEC NAME --attach

  $EXEC NAME --status
    -read screen sessions from `screen -list`
    -if a screen session named NAME exists, print \"on\". otherwise print \"off\"

  $EXEC NAME --toggle
    -if `$EXEC NAME --status` is \"off\"
      -run `$EXEC NAME --start
    -if `$EXEC NAME --status` is \"on\"
      -run `$EXEC NAME --stop

  $EXEC NAME --start
    read $screenDaemonConf and find a line of the form:
      NAME DELAY_INTERVAL TIMEOUT_INTERVAL CMD [ARG ARG ..]
    invoke $EXEC NAME --start DELAY_INTERVAL TIMEOUT_INTERVAL CMD [ARG ARG ..]

  $EXEC NAME --start DELAY_INTERVAL TIMEOUT_INTERVAL CMD [ARG ARG ..]
    -quit screen session 'NAME'
      screen -S NAME -X quit
    -start a screen session named 'NAME' that runs `$EXEC --run`
      screen -S NAME -d -m \\
        $EXEC NAME --run DELAY_INTERVAL TIMEOUT_INTERVAL \\
          CMD [ARG ARG ..]

  $0 NAME --run DELAY_INTERVAL TIMEOUT_INTERVAL CMD [ARG ARG ..]
    -start logging to LOG_FILE
    -create symlink to LOG_FILE at $logBaseDir/<NAME>/latest
    -run 'CMD [ARG ARG ..]' every DELAY_INTERVAL (if DELAY_INTERVAL == 0, exit after first run)
    -append STDOUT/STDERR to LOG_FILE
    -if CMD takes longer than TIMEOUT_INTERVAl, kill it (never kill it if TIMEOUT_INTERVAL is 0)

      LOG_FILE = $logBaseDir/<NAME>/<START_MILLIS>.log
      START_MILLIS = time in milliseconds at initial start

  $EXEC NAME --ensure
    -if `$EXEC NAME --status` is \"off\"
      -run `$EXEC NAME --start
    -otherwise, do nothing

  $EXEC NAME --attach
    -attach to screen session 'NAME'
      screen -S NAME -d r

  $EXEC NAME --stop|--exit|--quit|--kill
    -quit screen session 'NAME'
      screen -S NAME -X quit

  $EXEC NAME --tail
    -tail the 'latest' log file symlink for NAME
      tail -F $logBaseDir/NAME/latest

  NAME
    screen session name, must be letters, numbers, underscores, or hyphens only

  DELAY_INTERVAL = 0 | <POSITIVE_INT><TIME_UNIT>
    time to wait between commands (e.g.: 30s, 5m, 1500ms),
      or '0' for run only once
    if delay and timeout are non-zero, the maximum delay between commands is:
      DELAY_INTERVAL + TIMEOUT_INTERVAL

  TIMEOUT_INTERVAL = 0 | <POSITIVE_INT><TIME_UNIT>
    time to wait before killing command (e.g.: 30s, 5m, 1500ms),
      or '0' for never kill command
    if delay and timeout are non-zero, the maximum delay between commands is:
      DELAY_INTERVAL + TIMEOUT_INTERVAL

  POSITIVE_INT
    a positive (non-zero, non-negative) integer

  TIME_UNIT
    ms  => milliseconds
    s   => seconds
    m   => minutes
    min => minutes
    h   => hours
    d   => days (24 hours)
";

sub parseScreenDaemonConf();
sub getRunningScreenNames();
sub getIntervalMillis($);
sub checkRunArgs($$$@);
sub runCommandForever($$$@);
sub cmdTimeout($$@);
sub logMsg($$);
sub shellParse($);

sub main(@){
  if(@_ == 1 and $_[0] =~ /^(-h|--help)$/){
    print $usage;
    exit 0;
  }elsif(@_ == 0 or (@_ == 1 and $_[0] =~ /^--list$/)){
    my @configNames = sort keys %{parseScreenDaemonConf()};
    my @screenNames = getRunningScreenNames();
    my %okScreenNames = map {$_ => 1} @screenNames;
    for my $name(@configNames){
      my $status = defined $okScreenNames{$name} ? "on" : "off";
      print "$name $status\n";
    }
  }elsif(@_ == 1 and $_[0] =~ /^--list-names$/){
    my @configNames = sort keys %{parseScreenDaemonConf()};
    for my $name(@configNames){
      print "$name\n";
    }
  }elsif(@_ == 2 and $_[1] =~ /^--status$/){
    my ($name, $statusArg) = @_;
    my @screenNames = getRunningScreenNames();
    my %okScreenNames = map {$_ => 1} @screenNames;
    my $status = defined $okScreenNames{$name} ? "on" : "off";
    print "$status\n";
  }elsif(@_ == 1){
    my ($name) = @_;
    die "$usage\ninvalid name: $name\n" if $name !~ /^[a-zA-Z0-9_\-]+$/;
    system $0, $name, "--ensure";
    exec $0, $name, "--attach";
  }elsif(@_ == 1 or (@_ == 2 and $_[1] =~ /^(--ensure)$/)){
    my ($name, $toggleArg) = @_;
    my $status = `$0 $name --status`;
    if($status =~ /off/){
      print "starting\n";
      exec $0, $name, "--start";
    }else{
      print "already running\n";
    }
  }elsif(@_ == 2 and $_[1] =~ /^--toggle$/){
    my ($name, $toggleArg) = @_;
    my $status = `$0 $name --status`;
    if($status =~ /off/){
      print "starting\n";
      exec $0, $name, "--start";
    }elsif($status =~ /on/){
      print "stopping\n";
      exec $0, $name, "--stop";
    }
  }elsif(@_ == 2 and $_[1] =~ /^--start$/){
    my ($name, $startArg) = @_;
    my $conf = ${parseScreenDaemonConf()}{$name};
    if(not defined $conf){
      die "no entry in $screenDaemonConf found for $name\n";
    }
    my $delayInterval = $$conf{delayInterval};
    my $timeoutInterval = $$conf{timeoutInterval};
    my @cmd = shellParse $$conf{cmdStr};
    print "$name --start $delayInterval $timeoutInterval @cmd\n";

    checkRunArgs $name, $delayInterval, $timeoutInterval, @cmd;
    system "screen -S $name -X quit >/dev/null";
    system "screen", "-S", $name, "-d", "-m",
      $0, $name, "--run", $delayInterval, $timeoutInterval, @cmd;
  }elsif(@_ > 4 and $_[1] =~ /^--start$/){
    my ($name, $startArg, $delayInterval, $timeoutInterval, @cmd) = @_;
    checkRunArgs $name, $delayInterval, $timeoutInterval, @cmd;
    system "screen -S $name -X quit >/dev/null";
    system "screen", "-S", $name, "-d", "-m",
      $0, $name, "--run", $delayInterval, $timeoutInterval, @cmd;
  }elsif(@_ > 4 and $_[1] =~ /^--run$/){
    my ($name, $runArg, $delayInterval, $timeoutInterval, @cmd) = @_;
    checkRunArgs $name, $delayInterval, $timeoutInterval, @cmd;

    my $delayMillis = getIntervalMillis $delayInterval;
    my $timeoutMillis = getIntervalMillis $timeoutInterval;
    runCommandForever $name, $delayMillis, $timeoutMillis, @cmd;
  }elsif(@_ == 2 and $_[1] =~ /^(--tail)$/){
    my ($name) = @_;
    die "$usage\ninvalid name: $name\n" if $name !~ /^[a-zA-Z0-9_\-]+$/;
    exec "tail", "-F", "$logBaseDir/$name/latest";
  }elsif(@_ == 2 and $_[1] =~ /^(--stop|--exit|--quit|--kill)$/){
    my ($name) = @_;
    die "$usage\ninvalid name: $name\n" if $name !~ /^[a-zA-Z0-9_\-]+$/;
    system "screen", "-S", $name, "-X", "quit";
  }elsif(@_ == 2 and $_[1] =~ /^(--attach)$/){
    my ($name) = @_;
    die "$usage\ninvalid name: $name\n" if $name !~ /^[a-zA-Z0-9_\-]+$/;
    system "screen", "-S", $name, "-d", "-r"
  }else{
    die $usage;
  }
}

sub parseScreenDaemonConf(){
  my $confs = {};
  return $confs if not -f $screenDaemonConf;
  for my $line(`cat $screenDaemonConf`){
    chomp $line;
    next if $line =~ /^\s*(#.*)?$/; #skip empty or comment-only lines
    if($line =~ /^([a-zA-Z0-9_\-]+)\s+(\d+\w*)\s+(\d+\w*)\s+(.+)$/){
      my ($name, $delayInterval, $timeoutInterval, $cmdStr) = ($1, $2, $3, $4);
      if(not defined getIntervalMillis($delayInterval)){
        die "invalid delay interval: $delayInterval\n";
      }
      if(not defined getIntervalMillis($timeoutInterval)){
        die "invalid delay interval: $timeoutInterval\n";
      }
      $$confs{$name} = {
        name => $name,
        delayInterval => $delayInterval,
        timeoutInterval => $timeoutInterval,
        cmdStr => $cmdStr,
      };
    }else{
      die "malformed conf line: $line\n";
    }
  }
  return $confs;
}

sub getRunningScreenNames(){
  my @screenLines = `screen -list`;
  my @names;
  for my $line(@screenLines){
    if($line =~ /^\s+\d+\.([a-zA-Z0-9_\-]+)\s+/){
      push @names, $1;
    }
  }
  return @names;
}

sub getIntervalMillis($){
  my ($interval) = @_;
  if($interval =~ /^0$/){
    return 0;
  }elsif($interval =~ /^(\d+)(\w+)$/){
    my ($val, $unit) = ($1, $2);
    if($val == 0){
      return undef;
    }

    if($unit eq "ms"){
      return int($val + 0.5);
    }elsif($unit eq "s"){
      return int($val*1000.0 + 0.5);
    }elsif($unit eq "m" or $unit eq "min"){
      return int($val*1000.0*60.0 + 0.5);
    }elsif($unit eq "h"){
      return int($val*1000.0*60.0*60.0 + 0.5);
    }elsif($unit eq "d"){
      return int($val*1000.0*60.0*60.0*24.0 + 0.5);
    }else{
      return undef;
    }
  }else{
    return undef;
  }
}

sub checkRunArgs($$$@){
  my ($name, $delayInterval, $timeoutInterval, @cmd) = @_;
  if($name !~ /^[a-zA-Z0-9_\-]+$/){
    die "$usage\ninvalid name: $name\n";
  }elsif(not defined getIntervalMillis($delayInterval)){
    die "$usage\ninvalid delayInterval: $delayInterval\n"
  }elsif(not defined getIntervalMillis($delayInterval)){
    die "$usage\ninvalid timeoutInterval: $timeoutInterval\n"
  }elsif(@cmd == 0){
    die "$usage\nmissing CMD\n";
  }
}

sub runCommandForever($$$@){
  my ($name, $delayMillis, $timeoutMillis, @cmd) = @_;
  my $nowMillis = int(time * 1000.0);
  my $logFileName = "$name-$nowMillis.log";

  my $logDir = "$logBaseDir/$name";
  system "mkdir", "-p", $logDir;
  my $logFile = "$logDir/$logFileName";
  system "touch", $logFile;

  system "rm", "-f", "$logDir/latest";
  system "ln", "-s", $logFileName, "$logDir/latest";

  if($timeoutMillis > 0){
    $SIG{ALRM} = sub {die "timeout"};
  }

  my $logFH;
  if($PRINT_TO_STDOUT){
    open $logFH, "|-", "tee -a $logFile" or die "Could not tee logFH to $logFile\n";
  }else{
    open $logFH, ">>", $logFile or die "Could not append to $logFile\n";
  }

  logMsg($logFH, "started $name daemon");
  while(1){
    logMsg($logFH, "running command: @cmd");
    logMsg($logFH, "command start");

    cmdTimeout $logFH, $timeoutMillis, @cmd;

    logMsg($logFH, "command end");

    print $logFH "\n\n\n";
    $logFH->flush();

    if($delayMillis > 0){
      sleep $delayMillis/1000.0;
    }else{
      last;
    }
  }
}

sub cmdTimeout($$@){
  my ($logFH, $timeoutMillis, @cmd) = @_;

  my $logFileno = fileno $logFH;
  my $pid = open3(undef, ">&$logFileno", ">&$logFileno", @cmd);
  if($timeoutMillis > 0){
    eval {
      alarm $timeoutMillis/1000.0;
      waitpid $pid, 0;
      alarm 0;
    };
    if($@ =~ /timeout/){
      print $logFH "TIMEOUT pid=$pid after ${timeoutMillis}ms\n";
      system "kill", "-9", "$pid";
      waitpid $pid, 0;
    }
  }else{
    waitpid $pid, 0;
  }
}

sub logMsg($$){
  my ($logFH, $msg) = @_;

  my $now = time;
  my @localtime = localtime($now);
  my $millis = sprintf "%03d", int($now * 1000 + 0.5) % 1000;
  my $dateFmt = strftime("%Y-%m-%d %H:%M:%S.$millis %z", @localtime);

  chomp $msg;

  print $logFH "%%%|$EXEC|$dateFmt|$msg\n";
}

sub shellParse($){
  my ($str) = @_;
  my @words = `for x in $str; do echo \$x; done`;
  chomp foreach @words;
  return @words;
}

&main(@ARGV);
