#!/usr/bin/perl
use strict;
use warnings;

sub padl($$);
sub dfField($@);
sub readProcLines(@);

my $usage = "Usage:
  $0 [FILE FILE FILE ..]
  $0 TYPE [FILE FILE FILE ..]
    get TYPE size in units of powers of 1024 and in bytes using df
      (default TYPE is avail)
    print one per line
    if exactly one file is given, format is:
      \"<SIZE_HUMAN_READBLE><UNIT> (SIZE_BYTES)\"
    if two or more files are given, format is (with column alignment):
      \"<FILE>   <SIZE_HUMAN_READBLE><UNIT>   (SIZE_BYTES)\"

    TYPE
      df field to print (default is avail)
      avail | available | -a | --avail | --available
        available size (df --output=avail)

  $0
  $0 TYPE
    get all mountpoints and pass to $0
    roughly the same as: $0 TYPE `lsblk -n -o MOUNTPOINT`
";

sub main(@){
  my %dfBytes;
  my %dfHuman;
  my $maxLenFile = 0;
  my $maxLenDfBytes = 0;
  my $maxLenDfHuman = 0;

  my $type = "avail";
  if(@_ > 0 and $_[0] =~ /^(avail|available|-a|--avail|--available)$/){
    shift @_;
    $type = "avail";
  }

  my @files = @_;
  if(@files == 0){
    my @lsblkMountpoints = `lsblk -n -o MOUNTPOINT 2>/dev/null`;
    for my $dir(sort @lsblkMountpoints){
      if($dir =~ /^(.+)$/){
        push @files, $1;
      }
    }
  }
  for my $file(@files){
    if(not -e $file){
      die "ERROR: '$file' not found\n$usage\n";
    }
    $dfBytes{$file} = dfField $type, "-B", 1, $file;
    $dfHuman{$file} = dfField $type, "-h", $file;
    $maxLenFile = length $file if length $file > $maxLenFile;
    $maxLenDfBytes = length $dfBytes{$file} if length $dfBytes{$file} > $maxLenDfBytes;
    $maxLenDfHuman = length $dfHuman{$file} if length $dfHuman{$file} > $maxLenDfHuman;
  }

  for my $file(@files){
    my $msg = "";
    $msg .= padl($maxLenFile+1, $file) if @files > 1;
    $msg .= padl($maxLenDfHuman+1, $dfHuman{$file});
    $msg .= "(" . padl($maxLenDfBytes, $dfBytes{$file}) . ")";
    print "$msg\n";
  }
}

sub padl($$){
  return sprintf "%-$_[0]s", $_[1];
}

sub dfField($@){
  my ($field, @args) = @_;
  my @lines = readProcLines "df", "--output=$field", @args;
  @lines = grep {$_ !~ /^\s*$field\s*$/i} @lines;
  if(@lines != 1){
    die "malformed output of df: @lines\n";
  }
  my $output = $lines[0];
  $output =~ s/[\n\r]//g;
  $output =~ s/^\s*//;
  $output =~ s/\s*$//;
  return $output;
}

sub readProcLines(@){
  open CMD, "-|", @_ or die "could not run \"@_\"\n$!\n";
  my @lines = <CMD>;
  close CMD;
  return @lines;
}

&main(@ARGV);
