#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use Time::HiRes qw(time);

sub addLap();
sub readLaps();
sub parseLaps($);
sub formatGroup($$);
sub formatFormatSpecArg($$);
sub timeUnitToMillis($);
sub millisToHHMMSS($);
sub sum(@);
sub floor($);
sub round($);
sub nowMillis();

my $EXEC = basename $0;
my $DIR = "$ENV{HOME}/.cache/lap";

my $MAX_LAP_LEN_4HR = "4hr";

my $CMD_READ = "read";
my $CMD_APPEND = "append";

my $FORMAT_LAPS = '%START_TIME [%NUM_LAPS]: %LAP_DURS';
my $FORMAT_SHORT = 'x%NUM_LAPS ~%AVG_LAP_DUR %LAST_LAP_DUR -> %CUR_LAP_DUR';
my $FORMAT_FULL = ''
  . '%n'
  . '%%%%%% %START_TIME %%%%%%%n'
  . 'START_TIME_MS=%START_TIME_MS%n'
  . 'START_TIME=%START_TIME%n'
  . 'NUM_LAPS=%NUM_LAPS%n'
  . 'LAP_DURS=%LAP_DURS%n'
  . 'AVG_LAP_DUR=%AVG_LAP_DUR%n'
  . 'LAST_LAP_DUR=%LAST_LAP_DUR%n'
  . 'CUR_LAP_DUR=%CUR_LAP_DUR%n'
;

my $usage = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC
  $EXEC -a | --append | -p | --put
    append the date to $DIR/<YYYYMMDD>,
    formatted \"<MILLIS> #<DATE-FMT>\"

  $EXEC [OPTS] -g | --get | -r | --read
    -read all dates in $DIR/*
    -parse into millisecond timestamps
    -split into max $MAX_LAP_LEN_4HR <LAP_GROUP>s:
       -each date in each group is within $MAX_LAP_LEN_4HR of the next-latest date in the group
       -each date in each group is at least $MAX_LAP_LEN_4HR after or before every date in every other group
    -format each LAP_GROUP, one per line

  OPTS
    -c | --cur | --last
      print only the last group, followed by a newline
    --all
      print all groups, each followed by a newline (this is the default)

    -l | --format-laps   (THIS IS THE DEFAULT)
      same as: " . formatFormatSpecArg($FORMAT_LAPS, 14) . "
      e.g.: 2018-05-07_15:06:31 [3]: 8:05 8:07 8:56
    -s | --format-short
      same as: " . formatFormatSpecArg($FORMAT_SHORT, 14) . "
      e.g.: x3 ~5:02 5:25 -> 1:26
    -f | --format-full
      same as: " . formatFormatSpecArg($FORMAT_FULL, 14) . "

    --format=FORMAT_SPECIFIER
      FORMAT_SPECIFIER is any string, with the following replacements:
        %%              => '%'
        %n              => newline
        %START_TIME_MS  => first lap start time, in milliseconds since epoch fmt
        %START_TIME     => first lap start time, in YYYY-MM-DD HH:MM:SS fmt
        %NUM_LAPS       => number of laps (number of timestamps minus 1)
        %LAP_DURS       => distance between each pair of adjacent timestamps,
                           separated by a space, in M:SS, MM:SS, or H:MM:SS format
                           e.g.: \"5:32 0:20 3:23:50\"
        %AVG_LAP_DUR    => mean distance between each pair of adjacent timestamps,
                           in M:SS, MM:SS, or H:MM:SS format
        %LAST_LAP_DUR   => distance between last pair of adjacent timestamps,
                           in M:SS, MM:SS, or H:MM:SS format
        %CUR_LAP_DUR    => distance between last timestamp and current system time,
                           in M:SS, MM:SS, or H:MM:SS format
";

sub main(@){
  my $cmd = $CMD_APPEND;
  my $lastGroupOnly = 0;
  my $formatSpec = $FORMAT_LAPS;
  while(@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(-a|--append|-p|--put)$/){
      $cmd = $CMD_APPEND;
    }elsif($arg =~ /^(-g|--get|-r|--read)$/){
      $cmd = $CMD_READ;
    }elsif($arg =~ /^(-c|--cur|--last)$/){
      $lastGroupOnly = 1;
    }elsif($arg =~ /^(--all)$/){
      $lastGroupOnly = 0;
    }elsif($arg =~ /^--format=(.+)$/){
      $formatSpec = $1;
    }elsif($arg =~ /^(-l|--format-laps)$/){
      $formatSpec = $FORMAT_LAPS;
    }elsif($arg =~ /^(-s|--format-short)$/){
      $formatSpec = $FORMAT_SHORT;
    }elsif($arg =~ /^(-f|--format-full)$/){
      $formatSpec = $FORMAT_FULL;
    }else{
      die "$usage\nERROR: unknown arg: $arg\n";
    }
  }

  if($cmd eq $CMD_APPEND){
    addLap();
  }elsif($cmd eq $CMD_READ){
    my $groups = parseLaps(readLaps());
    die "ERROR: no groups found\n" if @$groups == 0;
    if($lastGroupOnly){
      $groups = [$$groups[-1]];
    }
    for my $group(@$groups){
      my $fmt = formatGroup $formatSpec, $group;
      print "$fmt\n";
    }
  }else{
    die "$usage\nERROR: unknown command: $cmd\n";
  }
}

sub addLap(){
  my $nowMillis = nowMillis();
  my $nowEpoch = round($nowMillis / 1000.0);

  my $nowYYYYMMDD = `date --date=\@$nowEpoch +%Y%m%d`;
  chomp $nowYYYYMMDD;

  my $nowFmt = `date --date=\@$nowEpoch`;
  chomp $nowFmt;

  my $destFile = "$DIR/$nowYYYYMMDD";
  open FH, ">> $destFile" or die "ERROR: could not append to $destFile\n$!\n";
  print FH "$nowMillis #$nowFmt\n";
  close FH;
}

sub readLaps(){
  die "ERROR: $DIR is not a dir\n" if not -d $DIR;
  my @files = glob "$DIR/*";
  die "ERROR: no files in $DIR/\n" if @files == 0;
  my @dates = `cat @files`;
  my $millis = [];
  for my $d(@dates){
    chomp $d;
    if($d =~ /^(\d{10})\s*(#.*)?$/){
      push @$millis, int($1 * 1000);
    }elsif($d =~ /^(\d{13})\s*(#.*)?$/){
      push @$millis, int($1);
    }else{
      my $epoch = `date --date="$d" +%s`;
      chomp $epoch;
      if($epoch =~ /^\d{10}$/){
        push @$millis, int($epoch * 1000);
      }else{
        die "ERROR: could not parse date: $d\n";
      }
    }
  }
  return $millis;
}

sub parseLaps($){
  my ($millis) = @_;
  my $maxLapMillis = timeUnitToMillis $MAX_LAP_LEN_4HR;

  my $groups = [];
  my $curGroup = undef;
  my $prev;
  #split out laps into groups with at least MAX_LAP_LEN_4HR between them
  for my $m(@$millis){
    if(defined $prev and $m-$prev > $maxLapMillis){
      $curGroup = undef;
    }
    if(not defined $curGroup){
      $curGroup = [];
      push @$groups, $curGroup;
    }
    push @$curGroup, $m;
    $prev = $m;
  }

  return $groups;
}

sub formatGroup($$){
  my ($fmtSpec, $group) = @_;
  my @lapDurMillis;
  my $prev;
  for my $m(@$group){
    if(defined $prev){
      push @lapDurMillis, $m - $prev;
    }
    $prev = $m;
  }

  my ($numLaps, $lapDurs, $avgLapDur, $lastLapDur);
  if(@lapDurMillis > 0){
    $numLaps = @lapDurMillis;
    $lapDurs = join " ", map {millisToHHMMSS $_} @lapDurMillis;
    $avgLapDur = millisToHHMMSS(sum(@lapDurMillis)/@lapDurMillis);
    $lastLapDur = millisToHHMMSS $lapDurMillis[-1];
  }else{
    $numLaps = 0;
    $lapDurs = "0:00";
    $avgLapDur = "0:00";
    $lastLapDur = "0:00";
  }

  my $curLapDur = millisToHHMMSS(nowMillis() - $$group[-1]);

  my $startTimeMillis = $$group[0];
  my $startTimeEpoch = round($startTimeMillis / 1000.0);
  my $startTime = `date --date=\@$startTimeEpoch +%Y-%m-%d_%H:%M:%S`;
  chomp $startTime;

  my $fmt = "$fmtSpec";
  $fmt =~ s/</<LESSTHAN>/g;
  $fmt =~ s/%%/<BOING>/g;
  $fmt =~ s/%n/<NEWLINE>/g;

  $fmt =~ s/%START_TIME_MS/$startTimeMillis/g;
  $fmt =~ s/%START_TIME/$startTime/g;
  $fmt =~ s/%NUM_LAPS/$numLaps/g;
  $fmt =~ s/%LAP_DURS/$lapDurs/g;
  $fmt =~ s/%AVG_LAP_DUR/$avgLapDur/g;
  $fmt =~ s/%LAST_LAP_DUR/$lastLapDur/g;
  $fmt =~ s/%CUR_LAP_DUR/$curLapDur/g;

  if($fmt =~ /%/){
    die "ERROR: unknown replacement variable in format: $fmtSpec\n";
  }

  $fmt =~ s/<NEWLINE>/\n/g;
  $fmt =~ s/<BOING>/%/g;
  $fmt =~ s/<LESSTHAN>/</g;

  return $fmt;
}

sub formatFormatSpecArg($$){
  my ($formatSpec, $indentSpaceCount) = @_;
  my $indent = ' 'x($indentSpaceCount + 10); #10 for --format='
  my $fmt = "--format='$formatSpec'";
  $fmt =~ s/%n/%n'\\\n$indent'/g;
  return $fmt;
}

sub timeUnitToMillis($){
  my ($s) = @_;
  if($s =~ /^(\d+)(\w+)$/){
    my ($val, $unit) = ($1, $2);
    if($unit =~ /^(ms|millis|millisecond|milliseconds)$/){
      return int($val);
    }elsif($unit =~ /^(s|sec|secs|sex|second|seconds)$/){
      return int($val * 1000);
    }elsif($unit =~ /^(m|min|mins|minute|minutes)$/){
      return int($val * 1000 * 60);
    }elsif($unit =~ /^(h|hr|hrs|hour|hours)$/){
      return int($val * 1000 * 60 * 60);
    }
  }
  die "ERROR: could not parse time unit $s\n";
}

sub millisToHHMMSS($){
  my ($millis) = @_;
  my $sex = round($millis / 1000.0) % 60;
  my $min = round($millis / 1000.0) / 60 % 60;
  my $hrs = round(round($millis / 1000.0) / 60 / 60);

  if($hrs > 0){
    return sprintf "%d:%02d:%02d", $hrs, $min, $sex;
  }else{
    return sprintf "%d:%02d", $min, $sex;
  }
}

sub sum(@){
  my $sum = 0;
  for my $num(@_){
    $sum += $num;
  }
  return $sum;
}

sub floor($){
  return int($_[0]);
}
sub round($){
  return floor($_[0] + 0.5);
}

sub nowMillis(){
  return round(time*1000.0);
}

&main(@ARGV);
