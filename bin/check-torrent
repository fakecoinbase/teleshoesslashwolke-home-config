#!/usr/bin/python
import sys, os, hashlib, StringIO, bencode

def main():
  torrentPath = sys.argv[1]
  info = readTorrentInfo(torrentPath)
  torrentPieceHashesItr = genTorrentPieceHashes(info)
  downloadPieceHashesItr = genDownloadPieceHashes(info)
  while True:
    expectedPieceHash = next(torrentPieceHashesItr, None)
    torrentPieceHashInfo = next(downloadPieceHashesItr, None)
    if torrentPieceHashInfo == None:
      actualPieceHash = None
    else:
      actualPieceHash = torrentPieceHashInfo['pieceHash']
    if expectedPieceHash == None and actualPieceHash == None:
      break
    elif expectedPieceHash == None:
      fail("TOO MANY PIECES")
    elif actualPieceHash == None:
      fail("MISSING PIECES")
    if actualPieceHash != expectedPieceHash:
      fail("PIECE HASH MISMATCH")
  print "\nVERIFIED"

def genTorrentPieceHashes(info):
  strIO = StringIO.StringIO(info['pieces'])
  p = strIO.read(20)
  while p:
    yield p
    p = strIO.read(20)

def readTorrentInfo(torrentPath):
  f = open(torrentPath, "rb")
  metaInfo = bencode.bdecode(f.read())
  f.close
  return metaInfo['info']

def getFilePaths(info):
  paths = []
  if 'files' in info:
    for fileInfo in info['files']:
      path = os.sep.join([info['name']] + fileInfo['path'])
      paths.append(path)
  else:
    path = info['name']
    paths.append(path)
  return paths

def genFilePieceHashes(paths, pieceLen):
  piece = ""

  for path in paths:
    if not os.path.isfile(path):
      fail("file is missing: " + path)

  pathsInPiece = []
  for path in paths:
    print "\nhashing pieces for file:\n" + path
    sys.stdout.flush()
    try:
      sfile = open(path.decode('UTF-8'), "rb")
      pathsInPiece.append(path)
      while True:
        piece += sfile.read(pieceLen-len(piece))
        if len(piece) != pieceLen:
          sfile.close()
          break
        yield {"pieceHash": hashPiece(piece), "paths": pathsInPiece}
        piece = ""
        pathsInPiece = [path]
    except:
      fail("error reading file: " + path)
  if piece != "":
    yield {"pieceHash": hashPiece(piece), "paths": pathsInPiece}

def genDownloadPieceHashes(info):
  pieceLen = info['piece length']
  paths = getFilePaths(info)
  return genFilePieceHashes(paths, pieceLen)

def hashPiece(piece):
  return hashlib.sha1(piece).digest()

def fail(msg):
  print "DOWNLOAD CORRUPTED: " + msg
  exit(1)

if __name__ == "__main__":
  main()
