#!/usr/bin/python
import sys, os, hashlib, StringIO, bencode

def main():
  torrentPath = sys.argv[1]
  info = readTorrentInfo(torrentPath)
  torrentPieceHashes = extractTorrentPieceHashes(info)
  downloadPieces = getDownloadPieces(info)
  print "\nhashing file pieces and comparing to torrent info\n"
  i = 0
  for piece in downloadPieces:
    pieceHash = hashlib.sha1(piece).digest()
    if i >= len(torrentPieceHashes):
      fail("TOO MANY PIECES")
    torrentPieceHash = torrentPieceHashes[i]
    i += 1
    if pieceHash != torrentPieceHash:
      fail("PIECE HASH MISMATCH")
  # ensure we've read all pieces
  if i != len(torrentPieceHashes):
    fail("MISSING PIECES")

def extractTorrentPieceHashes(info):
  pieces = []
  strIO = StringIO.StringIO(info['pieces'])
  p = strIO.read(20)
  while p:
    pieces.append(p)
    p = strIO.read(20)
  return pieces

def readTorrentInfo(torrentPath):
  f = open(torrentPath, "rb")
  metaInfo = bencode.bdecode(f.read())
  f.close
  return metaInfo['info']

def getFilePaths(info):
  paths = []
  if 'files' in info:
    for fileInfo in info['files']:
      path = os.sep.join([info['name']] + fileInfo['path'])
      paths.append(path)
  else:
    path = info['name']
    paths.append(path)
  return paths

def readFilePieces(paths, pieceLen):
  piece = ""
  pieces = []
  for path in paths:
    print "\nreading file:\n" + path
    try:
      sfile = open(path.decode('UTF-8'), "rb")
      while True:
        piece += sfile.read(pieceLen-len(piece))
        if len(piece) != pieceLen:
          sfile.close()
          break
        pieces.append(piece)
        piece = ""
    except:
      fail("error reading file: " + path)
  if piece != "":
    pieces.append(piece)
  return pieces

def getDownloadPieces(info):
  pieceLen = info['piece length']
  paths = getFilePaths(info)
  pieces = readFilePieces(paths, pieceLen)
  return pieces

def fail(msg):
  print "DOWNLOAD CORRUPTED: " + msg
  exit(1)

if __name__ == "__main__":
  main()
