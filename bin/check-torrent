#!/usr/bin/python
import sys, os, hashlib, StringIO, bencode

def main():
  # Open torrent file
  torrentFile = open(sys.argv[1], "rb")
  metainfo = bencode.bdecode(torrentFile.read())
  info = metainfo['info']
  pieces = StringIO.StringIO(info['pieces'])
  # Iterate through pieces
  for piece in piecesGenerator(info):
    # Compare piece hash with expected hash
    pieceHash = hashlib.sha1(piece).digest()
    if (pieceHash != pieces.read(20)):
      corruptionFailure()
  # ensure we've read all pieces
  if pieces.read():
    corruptionFailure()

def getFilePaths(info):
  paths = []
  if 'files' in info:
    for fileInfo in info['files']:
      path = os.sep.join([info['name']] + fileInfo['path'])
      paths.append(path)
  else:
    path = info['name']
    paths.append(path)
  return paths

def readFilePieces(paths, pieceLen):
  piece = ""
  pieces = []
  for path in paths:
    print path
    sfile = open(path.decode('UTF-8'), "rb")
    while True:
      piece += sfile.read(pieceLen-len(piece))
      if len(piece) != pieceLen:
        sfile.close()
        break
      pieces.append(piece)
      piece = ""
  if piece != "":
    pieces.append(piece)
  return pieces

def piecesGenerator(info):
  """Yield pieces from download file(s)."""
  pieceLen = info['piece length']
  paths = getFilePaths(info)
  pieces = readFilePieces(paths, pieceLen)
  for p in pieces:
    yield p

def corruptionFailure():
  """Display error message and exit"""
  print("download corrupted")
  exit(1)

if __name__ == "__main__":
  main()
