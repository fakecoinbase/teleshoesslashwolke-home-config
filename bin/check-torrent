#!/usr/bin/python
import sys, os, hashlib, StringIO, bencode

def piecesGenerator(info):
  """Yield pieces from download file(s)."""
  pieceLen = info['piece length']
  if 'files' in info: # yield pieces from a multi-file torrent
    piece = ""
    for fileInfo in info['files']:
      path = os.sep.join([info['name']] + fileInfo['path'])
      print path
      sfile = open(path.decode('UTF-8'), "rb")
      while True:
        piece += sfile.read(pieceLen-len(piece))
        if len(piece) != pieceLen:
          sfile.close()
          break
        yield piece
        piece = ""
    if piece != "":
      yield piece
  else: # yield pieces from a single file torrent
    path = info['name']
    print path
    sfile = open(path.decode('UTF-8'), "rb")
    while True:
      piece = sfile.read(pieceLen)
      if not piece:
        sfile.close()
        return
      yield piece

def corruptionFailure():
  """Display error message and exit"""
  print("download corrupted")
  exit(1)

def main():
  # Open torrent file
  torrentFile = open(sys.argv[1], "rb")
  metainfo = bencode.bdecode(torrentFile.read())
  info = metainfo['info']
  pieces = StringIO.StringIO(info['pieces'])
  # Iterate through pieces
  for piece in piecesGenerator(info):
    # Compare piece hash with expected hash
    pieceHash = hashlib.sha1(piece).digest()
    if (pieceHash != pieces.read(20)):
      corruptionFailure()
  # ensure we've read all pieces
  if pieces.read():
    corruptionFailure()

if __name__ == "__main__":
  main()
