#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

my $EXEC = basename $0;
my $CONTROL_PATH_DIR = "$ENV{HOME}/.ssh/control-paths";

my $usage = "Usage:
  Create an SSH master session before running SSH inside it, reusing it for future runs.

  $EXEC -h | --help
    show this message

  $EXEC [SSH_OPTS] DEST [COMMAND]
    -ensure SSH master session, like: `$EXEC --open <DESTINATION>`
    -run: `ssh <SSH_OPTS> -S <CONTROL_PATH> <DEST> <COMMAND>`

  $EXEC --open DEST
    -if CONTROL_PATH does not exist:
      -run: ssh -n -N -F -o ControlMaster=yes -o ControlPath=<CONTROL_PATH> DEST

  $EXEC --close
    -if CONTROL_PATH exists:
      -run: ssh -O exit -o ControlPath=<CONTROL_PATH> <DESTINATION>

  DEST
    SSH destination (e.g.: HOSTNAME or USER\@HOSTNAME)
  CONTROL_PATH
    $CONTROL_PATH_DIR/<DEST>
  SSH_OPTS
    any args that you can pass to SSH:
         [-46AaCfGgKkMNnqsTtVvXxYy] [-B bind_interface] [-b bind_address]
         [-c cipher_spec] [-D [bind_address:]port] [-E log_file]
         [-e escape_char] [-F configfile] [-I pkcs11] [-i identity_file]
         [-J destination] [-L address] [-l login_name] [-m mac_spec]
         [-O ctl_cmd] [-o option] [-p port] [-Q query_option] [-R address]
         [-S ctl_path] [-W host:port] [-w local_tun[:remote_tun]]
  COMMAND
    any command that you can pass to SSH
";

my $SSH_OPTS_ARGS_REGEX = "-[BbcDEeFIiJLlmOopQRSWw]";
my $SSH_OPTS_NOARGS_REGEX = "-([46AaCfGgKkMNnqsTtVvXxYy])+";

sub ensureSSHOpen($);
sub ensureSSHClosed($);
sub runSSH($$$);

sub main(@){
  if(@_ == 1 and $_[0] =~ /^(-h|--help)$/){
    print $usage;
  }elsif(@_ == 2 and $_[0] =~ /^(--open)$/){
    my $dest= $_[1];
    ensureSSHOpen($dest);
  }elsif(@_ == 2 and $_[0] =~ /^(--close)$/){
    my $dest= $_[1];
    ensureSSHClosed($dest);
  }elsif(@_ > 0){
    my $sshOpts = [];
    while(@_ > 0 and $_[0] =~ /^($SSH_OPTS_ARGS_REGEX|$SSH_OPTS_NOARGS_REGEX)$/){
      my $opt = shift @_;
      push @$sshOpts, $opt;
      if($opt =~ /^$SSH_OPTS_ARGS_REGEX$/){
        die "$usage\nERROR: missing arg to $opt\n" if @_ == 0;
        push @$sshOpts, shift @_;
      }
    }
    die "$usage\nERROR: missing DESTINATION\n" if @_ == 0;

    my $dest = shift @_;
    my $command = [@_];

    ensureSSHOpen($dest);
    runSSH($dest, $sshOpts, $command);
  }
}

sub ensureSSHOpen($){
  my ($dest) = @_;
  my $controlPath = "$CONTROL_PATH_DIR/$dest";
  system "mkdir", "-p", $CONTROL_PATH_DIR if not -d $CONTROL_PATH_DIR;
  if(not -e $controlPath){
    my @cmd = ("ssh",
      "-n", "-N", "-f",
      "-o", "ControlMaster=yes",
      "-o", "ControlPath=$controlPath",
      $dest,
    );
    system @cmd;
    if(not -e $controlPath){
      die "ERROR: @cmd failed\n";
    }
  }
}

sub ensureSSHClosed($){
  my ($dest) = @_;
  my $controlPath = "$CONTROL_PATH_DIR/$dest";
  if(-e $controlPath){
    my @cmd = ("ssh",
      "-O", "exit",
      "-o", "ControlPath=$controlPath",
      $dest,
    );
    system @cmd;
    if(-f $controlPath){
      die "ERROR: @cmd failed\n";
    }
  }
}

sub runSSH($$$){
  my ($dest, $sshOpts, $command) = @_;
  my $controlPath = "$CONTROL_PATH_DIR/$dest";
  my @cmd = ("ssh", @$sshOpts, "-S", $controlPath, $dest, @$command);
  system @cmd;
}

&main(@ARGV);
