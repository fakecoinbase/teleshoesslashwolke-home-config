#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep);

my $MAX_ATTEMPTS = 30;
my $timeoutMillis = 500;

my $ipmagicConf = "nuc";

my $igChannel = 1;

sub setAcState($);
sub ensureAcOnOff($);
sub toggleAc();
sub igcmd($);
sub isAcOn();

sub run(@);
sub runQuiet(@);
sub runGetOut($@);

my $usage = "Usage:
  $0 on|off|toggle
    use `igcmd` over ssh to set the state until `is-ac-on` shows the desired state
      -runs `igcmd` over ssh with `ipmagic $ipmagicConf` or `seedbox -r`
      -up to $MAX_ATTEMPTS attempts are made
      -waits ${timeoutMillis}ms between attempts

  $0
    same as '$0 toggle'

  $0 BUTTON
    run 'igcmd -c $igChannel BUTTON' over ssh,
      using 'ipmagic $ipmagicConf' or 'seedbox -r'

    BUTTON must start with 'ac-' and end with letters, numbers or underscores
    e.g.:
      ac-power
      ac-fan_down
";

sub main(@){
  my $stateArg = undef;
  my $button = undef;
  if(@_ == 0){
    $stateArg = "toggle";
  }elsif($_[0] =~ /^(on|off|toggle)$/){
    $stateArg = $_[0];
  }elsif($_[0] =~ /^(ac-\w+)$/){
    $button = $1;
  }else{
    die $usage;
  }

  if(defined $stateArg){
    setAcState $stateArg;
  }elsif(defined $button){
    igcmd $button;
  }
}

sub setAcState($){
  my ($stateArg) = @_;
  my $attempts = 0;
  print "checking ac on/off...\n";
  while(1){
    my $skipCheck = 0;
    if($stateArg eq "toggle"){
      $skipCheck = 1;
      if(isAcOn()){
        print "toggling ac: on => off\n";
        $stateArg = "off";
      }else{
        print "toggling ac: off => on\n";
        $stateArg = "on";
      }
    }
    my $targetIsAcOn = $stateArg eq "on" ? 1 : 0;
    if(not $skipCheck and isAcOn() == $targetIsAcOn){
      last;
    }else{
      die "ERROR: max attempts reached\n" if $attempts > $MAX_ATTEMPTS;
      print "ac is not $stateArg, toggling ac ($attempts out of $MAX_ATTEMPTS attempt)...\n";
      print "\n";
      toggleAc();
      print "\n";
      print "waiting ${timeoutMillis}ms\n";
      sleep ($timeoutMillis/1000.0);
      $attempts++;
    }
  }
  print "\nac is $stateArg\n";
}

sub ensureAcOnOff($){
  my $targetIsAcOn = shift;

  print "checking ac on/off...\n";
  if(isAcOn() == $targetIsAcOn){
    print "ok: ac is " . (isAcOn ? "on" : "off") . "\n";
  }
}

sub toggleAc(){
  igcmd "ac-power";
}

sub igcmd($){
  my ($button) = @_;
  my $ipmagicHost = `ipmagic $ipmagicConf 2>/dev/null`;
  chomp $ipmagicHost;
  if($ipmagicHost =~ /\w/){
    run "ssh", $ipmagicHost, "igcmd", "-c", $igChannel, $button;
  }else{
    run "seedbox", "-r", "igcmd", "-c", $igChannel, $button;
  }
}

sub isAcOn(){
  my $res = runQuiet "is-ac-on";
  chomp $res;
  if($res eq "yes"){
    print "is-ac-on: yes\n";
    return 1;
  }elsif($res eq "no"){
    print "is-ac-on: no\n";
    return 0;
  }else{
    die "error running is-ac-on\n";
  }
}

sub run(@){
  return runGetOut 0, @_;
}

sub runQuiet(@){
  return runGetOut 1, @_;
}

sub runGetOut($@){
  my ($quiet, @cmd) = @_;
  print "@cmd\n" if not $quiet;
  open FH, "-|", @cmd;
  my $out = '';
  while(my $line = <FH>){
    $out .= $line;
    print $line if not $quiet;
  }
  close FH;
  return $out;
}

&main(@ARGV);
