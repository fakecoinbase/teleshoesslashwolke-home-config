#!/usr/bin/perl
use strict;
use warnings;
use lib `dirname $0 | tr -d '\n'`;
use ScriptScript;

sub addKeys();
sub fetchKeyFileFromLocalKeyring($);

sub main(@) {
    getRoot @_;

    print "\n### Adding architectures.\n";
    run qw(dpkg --add-architecture i386);

    print "\n### Adding keys.\n";
    addKeys();

    my $repos = getInstallPath "repos";
    my $sources = "/etc/apt/sources.list.d";
    my $now = `date +%Y-%m-%dT%H%M%S`; chomp $now;
    my $backup = "$sources.$now";

    my @rsyncLines = procLines "rsync", "-n", "--del", "-rlptDv", "$repos/", "$sources";
    my $cnt = @rsyncLines;
    @rsyncLines = map {"$_\n"} @rsyncLines;
    if (@rsyncLines != 4) {
        print "\n### Updating repo lists.\n";
        run "mv", $sources, $backup;
        run "mkdir", $sources;
        run "rsync", "--del", "-rlptDv", "$repos/", $sources;
    } else {
        print "\n### sources lists have not changed.\n";
    }
}

sub addKeys(){
    my %gpgKeys = readConfDir getInstallPath("gpgkeys");
    for my $repo(keys %gpgKeys){
        my $gpgKeyId = ${$gpgKeys{$repo}}[0];
        print "\n### installing gpg key $repo => $gpgKeyId\n";

        my $keyFile = fetchKeyFileFromLocalKeyring $gpgKeyId;
        if(not defined $keyFile){
            my $keyServer = "pgpkeys.mit.edu";
            #my $keyServer = "keyserver.ubuntu.com";

            print "gpg key $gpgKeyId missing, fetching from keyserver $keyServer\n";
            runUser "gpg", "--keyserver", $keyServer, "--recv-key", $gpgKeyId;
            $keyFile = fetchKeyFileFromLocalKeyring $gpgKeyId;
        }

        if(defined $keyFile){
            print "adding $gpgKeyId to apt:\n";
            run "sudo", "apt-key", "add", $keyFile;
            run "rm", $keyFile;
        }else{
            die "error fetching key $gpgKeyId for $repo\n";
        }
    }
}

sub fetchKeyFileFromLocalKeyring($){
    my ($gpgKeyId) = @_;
    my $tmpFile = "/tmp/gpg-key-$gpgKeyId.gpg";
    run "rm", "-f", $tmpFile;
    runUser "gpg", "--armor", "--output", $tmpFile, "--export", $gpgKeyId;
    my $contents = tryReadFile $tmpFile;
    if($contents =~ /BEGIN PGP PUBLIC KEY BLOCK/){
        return $tmpFile;
    }else{
        run "rm", "-f", $tmpFile;
        return undef;
    }
}

&main(@ARGV);
